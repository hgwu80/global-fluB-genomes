#! /Users/pl6/homebrew/bin/python
# ~/scripts/timeseries_counter.py table_of_samples.txt <outprefix>

## Takes table of isolates generated by ~/scripts/genome_contribution_checker.py
## Takes level of location
## Outputs counts table with Location, Lat, Long, and counts for: WTSI or Other source, (Yam or Vic)

import re, sys
from geopy import geocoders
from collections import defaultdict

taxa_file = sys.argv[1]
#level = sys.argv[2]
outprefix = sys.argv[2]

my_api_key = 'AIzaSyBwyuFNTVmW8aQQn8blRQ-t_w1srY1hjPU'
gn = geocoders.GoogleV3(my_api_key)

loc_file = '/Users/pl6/Desktop/Projects/2-FluB/0-alignments_2015-08-25/17-Maps_of_samples/2-data/city_latlong_summary.txt'
outfh = open("%s_timeseries_summary.txt" % outprefix, 'w')
dates_dict = defaultdict(dict)
locs_coords = {}
loc_count = 0
types = ['wtsi-yam', 'other-yam', 'wtsi-vic', 'other-vic']
geolocations = {}

## Get current locations and put into dictionary
with open(loc_file, 'r') as lfh:
	next(lfh)
	for line in lfh:
		line = line.strip()
		loc = (line.split('\t')[0]).lower()
		loc = re.sub(' ', '', loc)
		lat = line.split('\t')[1]
		lon = line.split('\t')[2]
		geolocations[loc] = (lat,lon)
		
with open(taxa_file, 'r') as tfh:
	next(tfh)
	for line in tfh:
		line = line.strip()
		strain, date_plain, date_dec, date_prec, region, country, gen_loc, city, source, id, lineage = line.split('\t')
		
		## Revise input
		country = re.sub('-', '', country)
		city = re.sub('-', '', city)
		(lat,lng) = (0,0)
		date_dec = float(date_dec)

		if 'WTSI' in source:
			source = 'wtsi'
		else:
			source = 'other'
		
		type = '%s-%s' % (source,lineage)
		
		##Check to see if anything's up with output
		print date_plain + "\t" + str(date_dec) + "\t" + type
		r = date_dec%1
		date_ivl = date_dec - r
		'''date_ivl = 0
		
		if r > 0.83:
			date_ivl = date_dec - r + 1.08
		elif r > 0.33 and r < 0.83:
			date_ivl = date_dec - r + 0.58
		elif r < 0.33:
			date_ivl = date_dec - r + 0.08
		else:
			print "uh oh? %s" % r
			break'''
		
		print date_ivl
		if date_ivl not in dates_dict:
			for t in types:
				dates_dict[date_ivl][t] = 0
		dates_dict[date_ivl][type] += 1
		
		'''if level == 'country':
			location = country
		elif level == 'city':
			location = city
		else:
			print "Error: do you want by 'country' or by 'city?'"
		
		if location.lower() in geolocations:
			(lat,lng) = geolocations[location.lower()]
			print "good"
		else:
			geoplace, (lat,lng) = gn.geocode(location)
		
		## Count the location and type	
		if location not in locs_dict:
			for t in types:
				locs_dict[location][t] = 0
			locs_coords[location] = (lat,lng)
			loc_count += 1
		locs_dict[location][type] += 1'''	

outfh.write("Time\twtsi-yam\tother-yam\twtsi-vic\tother-vic\n")
for d in sorted(dates_dict):
	outfh.write("%s" % d)
	for t in types:
		outfh.write("\t%s" % dates_dict[d][t])
	outfh.write("\n")

#print("%s %s locations counted" % (loc_count, level))'''
outfh.close()